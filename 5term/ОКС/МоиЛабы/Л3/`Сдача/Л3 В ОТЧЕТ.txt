INITIAL_VALUE = 0x00
POLYNOM = 0xA9

def create_frame(self, data):
    flag = b'@u'
    destination_address = b'\x00'
    source_address = bytes([int(self.ser_out.port[3:])])

    if len(data) < 21:
        padded_data = data + TERMINATOR + b'0' * (20 - len(data))
    else:
        padded_data = data

    crc = self.compute_crc8(padded_data)
    frame_without_flag = destination_address + source_address + padded_data + bytes([crc])

    return flag, frame_without_flag

def introduce_error(self, data, probability=0.4):
    if random.random() <= probability:
        byte_array = bytearray(data)
        byte_index = random.randint(0, len(byte_array) - 1)
        bit_index = random.randint(0, 7)
        byte_array[byte_index] ^= (1 << bit_index)
        data = bytes(byte_array)
    return data

def compute_crc8(self, data: bytes) -> int:
    remainder = INITIAL_VALUE
    for byte in data:
        remainder ^= byte
        for _ in range(8):
            remainder <<= 1
            if (remainder & 0x80) != 0:
                remainder ^= (POLYNOM | 0x80)
    return remainder

def cyclic_shift_correction(self, message: bytes, crc: int) -> bytes:
    weight = bin(crc).count('1')
    shift_message = bytearray(message)
    if weight <= 1:
        shift_message[-1] ^= crc
        return bytes(shift_message)

    count_shifts = 0
    size_bits = len(shift_message) * 8

    for _ in range(size_bits):
        count_shifts += 1
        shift_message = self.left_cycle_shift(shift_message)
        crc = self.compute_crc8(shift_message)
        if bin(crc).count('1') <= 1:
            shift_message[-1] ^= crc
            for _ in range(count_shifts):
                shift_message = self.right_cycle_shift(shift_message)
            return bytes(shift_message)
    return message

def right_cycle_shift(self, byte_message: bytearray) -> bytearray:
    shift_byte_message = bytearray(len(byte_message))
    lowest_bit_of_last_byte = byte_message[-1] & 1
    for i in range(len(byte_message)):
        shift_byte_message[i] = (byte_message[i] & 0xFF) >> 1
        if i > 0:
            shift_byte_message[i] |= (byte_message[i - 1] & 1) << 7
    shift_byte_message[0] |= lowest_bit_of_last_byte << 7
    return shift_byte_message

def left_cycle_shift(self, byte_message: bytearray) -> bytearray:
    shift_byte_message = bytearray(len(byte_message))
    highest_bit_of_first_byte = (byte_message[0] & 0x80) >> 7
    for i in range(len(byte_message)):
        shift_byte_message[i] = ((byte_message[i] & 0xFF) << 1) & 0xFF
        if i < len(byte_message) - 1:
            shift_byte_message[i] |= (byte_message[i + 1] & 0x80) >> 7
    shift_byte_message[-1] |= highest_bit_of_first_byte
    return shift_byte_message

def receive_data(self):
    buffer = b''
    expected_frame_length = 26
    while not self.stop_receive_thread:
        if self.ser_in and self.ser_in.is_open:
            try:
                if self.ser_in.in_waiting >= expected_frame_length:
                    buffer = self.ser_in.read(self.ser_in.in_waiting)
                    if buffer.startswith(b'@u'):
                        flag = buffer[0:2]
                        frame_without_flag = buffer[2:]

                        unstuffed_frame = self.unstuffing(frame_without_flag)

                        destination_address = unstuffed_frame[0]
                        source_address = unstuffed_frame[1]
                        data = unstuffed_frame[2:23]
                        received_crc = unstuffed_frame[23]

                        calculated_crc = self.compute_crc8(data)
                        if calculated_crc == received_crc:
                            pass
                        else:
                            corrected_data = self.cyclic_shift_correction(data, received_crc)
                        if TERMINATOR in data:
                            actual_data = data.split(TERMINATOR)[0]
                        else:
                            actual_data = data

                        self.update_output_text(actual_data.decode(errors='ignore'))

            except serial.SerialException as e:
                self.log_status(f"Ошибка при чтении данных: {str(e)}")
                break