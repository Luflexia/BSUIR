// пример работы с двумерным массивом (матрицей)
// используя УКАЗАТЕЛЬ на УКАЗАТЕЛЬ
#include <stdio.h>
#include <conio.h>
#include <locale.h>
#include <windows.h>
#include <stdlib.h>

int Vvod(int **MS, int n_str, int n_stl)
{
	int i, j, fl;
	if (!MS)                           // проверка не нулевой ли указатель
	{
		puts("память для массива (матрицы) не выделена");
		return 1;
	}
	printf("\nВвод массива (матрицы)\n");
	for (i = 0; i < n_str; i++)        // цикл по строкам массива(матрицы)
	for (j = 0; j < n_stl; j++)        // цикл по элементам строки (столбцам) массива(матрицы)
	{
		printf("MS[ %d ][ %d ] = ", i, j);
		fflush(stdin); //rewind(stdin);        // чистка входного буфера
		if (!scanf("%d", *(MS + i) + j)) j--;  // проверка введено ли число
		// if (!scanf("%d", &MS[i][j]));       // можно использовать и MS[i][j] 
	}
	return 0;
}

void Print(int **MS, int n_str, int n_stl)   
{
	int i, j;
	if (!MS)                              // проверка не нулевой ли указатель
	{
		puts("память для массива (матрицы) не выделена");
		return;
	}
	printf("\n");
	for (i = 0; i < n_str; i++)           // цикл по строкам массива(матрицы)
	{
		for (j = 0; j < n_stl; j++)       // цикл по элементам строки (столбцам) массива(матрицы)
			printf("%4d", *(*(MS + i) + j));       
		    // printf("%4d", MS[i][j]);   // можно использовать и MS[i][j] 
		printf("\n");
	}
}

//--------------------------------------------- пример 1 -----------------------------------
// пример работы с двухмерным массивом через указатель на указатель
// найти выше главной диагонали max ст-ц и ниже min
//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int **p= nullptr, n, s, i, j, j1, j2, sum1, sum2, sum;
//	do
//	{
//		system("CLS");
//		printf("\nвведите размерность квадратной матрицы\n");
//		i = scanf("%d", &n);
//		if (i<1)
//		{
//			fflush(stdin);  // чистка буффера клавиатуры при ошибке ввода
//			continue;       // повтор цикла
//		}
//		s = n;             // матрица квадратная (число строк=числу столбцов)
//		if (!(p = (int **)malloc(sizeof(int*)*n)))
//			printf("\nНедостаточно свободной памяти \nуменьшите число строк матрицы");
//		for (i = 0; i<n; i++) // цикл выбора указателя на строку матрицы
//		if (!(*(p + i) = (int *)malloc(sizeof(int)*s))) // выделение памяти под строку матрицы
//		{                                               // с проверкой выделена ли память
//			printf("\nНедостаточно свободной памяти \nуменьшите число ст-цов матрицы");
//			for (j = 0; j<i; j++) free(*(p + j)); free(p); // освобождение памяти при ошибке
//			p = nullptr;   // сброс указателя для повтора операции выделения памяти
//			break;         // выход из цикла по i (выбора указателя на строку матрицы)
//		}
//	} while (!p);          
//
//	Vvod(p, n, s);
//	system("CLS");
//	printf("\nВведенная матрица");
//	Print(p, n, s);
//	sum = 0;               // sum - переменная для накопления текущей суммы (выше/ниже) диагон. 
//                                   // sum1 и sum2 - переменные (контрольные) для анализа сумм                               // в анализир. ст-це с их начальной инициализацией
//	sum1 = *(*p + 1);              // для поиска max ст-ца выше диагонали (верхний эл-т второго ст-ца)
//	sum2 = *(*(p + n - 1) + s - 2);// для поиска min ст-ца ниже диагонали (нижний эл-т предпосл. ст-ца)
//	j1 = 1; j2 = s - 2;            // стартовые номера ст-цов (второй и предпоследний)
//	for (j = 0; j<s; j++)          // цикл выбора очередного столбца матрицы к анализу
//	{
//		for (i = 0; i<n; i++)      // цикл по элементам этого (j-го) ст-ца
//		if (i != j) sum += *(*(p + i) + j);// выбран для суммы не элемент диагонали
//		else                               // выбран элемент диагонали
//		{
//			if (sum1<sum)                  // найден ст-ц с большей суммой чем sum1
//			{
//				sum1 = sum;  j1 = j;       // запоминаем найденную сумму и номер ст-ца с этой суммой
//				sum = 0;                   // сброс суммы для подсчета суммы под диагональю  
//			}
//		}
//		if (j<s - 1 && sum2>sum)           // найден ст-ц с меньшей суммой чем sum2
//		{
//			sum2 = sum; j2 = j;            // запоминаем найденную сумму и номер ст-ца с этой суммой
//		}
//		sum = 0;                           // сброс суммы для аналица следующего ст-ца
//		
//	}
//	for (i = 0; i<n; i++)                 // НАПРИМЕР обнуление найденных ст-цов (или что-либо иное)
//	{
//		if (i<j1) *(*(p + i) + j1) = 0;
//		if (i>j2) *(*(p + i) + j2) = 0;
//	}
//	printf("\n\nПреобразованная матрица");
//	Print(p, n, s);
//	for (i = 0; i<n; i++)  free(*(p + i));// освобождение памяти на которую указывает p[i]  
//	free(p);                              // освобождение памяти на которую указывает p
//	//getch();                    
//	return 0;
//}




//--------------------------------------------- пример 2 -----------------------------------
// пример: после каждой строки матрицы с четной (не нулевой) суммой элементов вставить новую
// строку (например, с элементами на N большими, чем в строке выше (с найденой четной суммой))
//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int **p= nullptr, n, s, i, j, i1, sum;
//	do
//	{
//		system("CLS");
//		printf("\nвведите размерность матрицы\n");
//		i = scanf("%d%d", &n,&s);
//		if (i<2)
//		{
//			fflush(stdin);  // чистка буффера клавиатуры при ошибке ввода
//			continue;       // повтор цикла
//		}
//		if (!(p = (int **)malloc(n*sizeof(int*))))
//			printf("\nНедостаточно свободной памяти \nуменьшите число строк матрицы");
//		for (i = 0; i<n; i++) // цикл выбора указателя на строку матрицы
//		if (!(*(p + i) = (int *)malloc(s*sizeof(int)))) // выделение памяти под строку матрицы
//		{                                               // с проверкой выделена ли память
//			printf("\nНедостаточно свободной памяти \nуменьшите число ст-цов матрицы");
//			for (j = 0; j<i; j++) free(*(p + j)); free(p); // освобождение памяти при ошибке
//			p = nullptr;   // сброс указателя для повтора операции выделения памяти
//			break;         // выход из цикла по i (выбора указателя на строку матрицы)
//		}
//	} while (!p);
//
//	Vvod(p, n, s);
//	system("CLS");
//	printf("\nВведенная матрица");
//	Print(p, n, s);
//	for (i = 0; i < n; i++)          // цикл выбора очередной строки матрицы к анализу
//	{  
//		sum = 0;                     // sum - переменная для накопления текущей суммы 
//		for (j = 0; j < s; j++)      // цикл по элементам выбранной (i-ой) строки
//			sum += *(*(p + i) + j);  // сумма элементов строки
//		if (sum && sum % 2 == 0)     // найдена строка с четной суммой
//		{    
//			n++;
//			if (!(p = (int **)realloc(p, n*sizeof(int*))))
//				printf("\nНедостаточно свободной памяти \nУуменьшите число строк матрицы");
//			for (i1 = n - 1; i1>i+1; i1--)  // цикл сдвига указателей на строки матрицы вниз (до i-го)
//				*(p + i1) = *(p + i1-1);		
//			if (!(*(p + i+1) = (int *)calloc(s,sizeof(int))))    // выделение памяти под НОВУЮ строку матрицы
//			{                                                    // с проверкой выделена ли память
//				printf("\nНедостаточно свободной памяти для увеличения\n числа строк матрицы");
//				for (j = 0; j<n - 1; j++) free(*(p + j)); free(p); // освобождение памяти при ошибке
//				return 0;         // выход из цикла по i (выбора указателя на строку матрицы)
//			}
//			Print(p, n, s);
//			// Здесь можно вставлять код для заполнения новой строки матрицы
//			// ...  например так :
//			for (j = 0; j < s; j++)
//				*(*(p + i+1) + j) = *(*(p + i) + j)+2;
//			i++;
//		}
//	}
//	printf("\n\nПреобразованная матрица");
//	Print(p, n, s);
//	for (i = 0; i<n; i++)  
//		free(*(p + i));// освобождение памяти на которую указывает p[i]  
//	free(p);                              // освобождение памяти на которую указывает p                   
//	return 0;
//}


// -------------------------------------------- - пример 3 -------------------------------
// пример: найти в матрице столбец с max числом элементов кратных 5 и перед ним 
// вставить столбец например, пустой.  
//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int **p = nullptr, n, s, i, j, i1, j1, sum, sum1 = 0;
//	do
//	{
//		system("CLS");
//		printf("\nвведите размерность матрицы\n");
//		i = scanf("%d%d", &n, &s);
//		if (i<2)
//		{
//			rewind(stdin);  // чистка буффера клавиатуры при ошибке ввода
//			continue;       // повтор цикла
//		}
//		if (!(p = (int **)malloc(n*sizeof(int*))))
//			printf("\nНедостаточно свободной памяти \nуменьшите число строк матрицы");
//		for (i = 0; i<n; i++) // цикл выбора указателя на строку матрицы
//		if (!(*(p + i) = (int *)malloc(s*sizeof(int)))) // выделение памяти под строку матрицы
//		{                                               // с проверкой выделена ли память
//			printf("\nНедостаточно свободной памяти \nуменьшите число ст-цов матрицы");
//			for (j = 0; j<i; j++) free(*(p + j)); free(p); // освобождение памяти при ошибке
//			p = nullptr;   // сброс указателя для повтора операции выделения памяти
//			break;         // выход из цикла по i (выбора указателя на строку матрицы)
//		}
//	} while (!p);
//
//	Vvod(p, n, s);
//	system("CLS");
//	printf("\nВведенная матрица");
//	Print(p, n, s);                        
//	for (j = 0; j < s; j++)          // цикл выбора очередного столбца матрицы к аналицу
//	{
//		sum = 0;                     // sum - переменная для накопления текущей суммы 
//		for (i = 0; i < n; i++)      // цикл по элементам выбранного столбца
//		if (*(*(p + i) + j) % 5 == 0) sum++; // сумма элементов кратных 5
//		if ((!j && sum!=0) || sum>sum1) // если столбец матрицы первый или сумма max
//		{
//			j1 = j;                  // запоминаем номер столбца
//			sum1 = sum;              // найденную сумму
//		}
//	}
//    if (sum1)                        // такой столбец (j1) в матрице существует
//	{
//		s++;
//		for (i = 0; i < n; i++)  // цикл увеличения числа элементов в каждой стоке (на один) 
//		if (!(*(p + i) = (int *)realloc(*(p + i),s*sizeof(int))))  // новый элемент добавляется 
//			                                                       // в конец строки
//		{                                                    
//			printf("\nНедостаточно свободной памяти для увеличения\n числа строк матрицы");
//			for (j = 0; j<i; j++) free(*(p + j)); free(p); // освобождение памяти при ошибке
//			return 0;         // выход из цикла по i (выбора указателя на строку матрицы)
//		}
//		// Здесь можно вставлять код для заполнения нового столбца матрицы
//		// ...  например обнулить его :
//		Print(p, n, s);
//		for (i = 0; i < n; i++)
//			*(*(p + i) + s-1) = 0;
//	}
//	printf("\n\nПреобразованная матрица");
//	Print(p, n, s);
//	for (i = 0; i<n; i++)
//		free(*(p + i));                   // освобождение памяти на которую указывает p[i]  
//	free(p);                              // освобождение памяти на которую указывает p                   
//	return 0;
//}
//


//--------------------------------------------- пример 4 -----------------------------------
// пример работы с массивом через указатель на указатель
// 
int main()
{
	setlocale(LC_ALL, "Russian");
	//int **p= nullptr, n, s, i, ii, j, jj,;
	char ****ptr = nullptr;
	int st = 10;        // длина строки символов
	int k = 0, n, s, z, r, i, ii, j, jj;
	
	do
	{
		system("CLS");
		printf("\nвведите количество матриц строк\n");
		if(k<=0) i = scanf("%d", &k);
		if (i<1)
		{
			fflush(stdin);  // чистка буффера клавиатуры при ошибке ввода
			continue;       // повтор цикла
		}
		printf("\nвведите размерность матрицы строк\n");
		i = scanf("%d%d", &n,&s);
		if (i<2)
		{
			fflush(stdin);  // чистка буффера клавиатуры при ошибке ввода
			continue;       // повтор цикла
		}
		            // матрица квадратная (число строк=числу столбцов)
		if (!(ptr = (char ****)malloc(sizeof(char***)*k))) // выделение памяти под массив указателей
		{                                                  // на матрицы символьных строк
			printf("\nНедостаточно свободной памяти \nуменьшите число матриц");
			k = 0; continue;
		}
		for (i = 0; i<k; i++)                          // цикл выбора указателя на матрицу симв. строк
		if (!(*(ptr + i) = (char ***)malloc(sizeof(char**)*n))) // выделение памяти под массив указателей
		{                                              // на строки матрицы с проверкой выделена ли память
			printf("\nНедостаточно свободной памяти \nуменьшите число строк матрицы");
			for (j = 0; j<i; j++) free(*(ptr + j));    // освобождение памяти (указатель на матрицы)
			free(ptr); ptr = nullptr;                  // сброс указателя для повтора операции выделения памяти
			break;                // выход из цикла по i 
		}
		for (i = 0; i < k; i++)                                  // цикл выбора указателя на матрицу (выбор матрицы)
		{
			for (j = 0; j < n; j++)                              // цикл выбора указателя на строку матрицы
			if (!(*(*(ptr + i) + j) = (char **)malloc(sizeof(char*)*s))) // выделение памяти под строку матрицы (указатель
			{                                                    // на строку символов) с проверкой выделена ли память
				printf("\nНедостаточно свободной памяти \nуменьшите число ст-цов матрицы");
                for (z = 0; z < i; z++)
				for (r = 0; r < n; r++) free(*(*(ptr + z) + r)); // в предыдущих (0..i-1) выделена память для всех строк
				for (r = 0; r < j; r++) free(*(*(ptr + i) + r)); // в последней i-ой матрице выделена память не для всех строк
				for (j = 0; j < r; j++) free(*(ptr + j));        // освобождение памяти (указатель на матрицы)
				free(ptr); ptr = nullptr;                        // сброс указателя для повтора операции выделения памяти
				break;                // выход из цикла по i (выбора указателя на строку матрицы)
			}
			if (!ptr) break;
		}

		for (i = 0; i < k; i++)                                  // цикл выбора указателя на матрицу (выбор матрицы)
		{
		  for (j = 0; j < n; j++)                                // цикл выбора указателя на строку матрицы
		  {
			 for (z = 0; z < s; z++)
			 if (!(*(*(*(ptr+i)+j)+z) = (char *)malloc(st)))      // выделение памяти под строку матрицы (указатель
				{                                                // на строку символов) с проверкой выделена ли память
					printf("\nНедостаточно свободной памяти \nуменьшите число ст-цов матрицы");
					
					for (ii = 0; ii < i; ii++)
					for (jj = 0; jj < n; jj++)
					for (r = 0; r < s; r++) free(*(*(*(ptr+ii)+jj)+z));      // в предыдущих (0..i-1) выделены все указатели на строки

					for (jj = 0; jj < j; jj++)
					for (r = 0; r < s; r++) free(*(*(*(ptr + i) + jj) + r)); // в 0..j-1 строках i-ой матрицы выделена память для 
					                                                         // всех указателей на символьные строки
					for (r = 0; r < z; r++) free(*(*(*(ptr+i)+j)+z));        // в последней j-ой строке i-ой матрицы выделена память
					                                                         // не для всех указателей на строки
					for (j = 0; j < r; j++) free(*(ptr+j));                  // освобождение памяти (указатель на матрицы)
					free(ptr); ptr = nullptr;                                // сброс указателя для повтора операции выделения памяти
					break;                // выход из цикла по i (выбора указателя на строку матрицы)
				}
                if (!ptr) break;
			}
			if (!ptr) break;
		}
	} while (!ptr);          
	
	system("CLS");
	for (i = 0; i < k; i++)               // цикл выбора указателя на матрицу (выбор матрицы)
	for (j = 0; j < n; j++)               // цикл выбора указателя на строку матрицы
	for (z = 0; z < s; z++)               // цикл выборы символьной строки (указателя на нее)
	{
		printf("вводите строку в матрицу %d в ячейку %d  %d ",i,j,z);
		fflush(stdin);
		gets(*(*(*(ptr + i) + j) + z));
	}

	system("CLS");
	for (i = 0; i < k; i++)               // цикл выбора указателя на матрицу (выбор матрицы)
	{
	  printf("\n");
	  for (j = 0; j < n; j++)               // цикл выбора указателя на строку матрицы
	  {
        printf("\n");
		for (z = 0; z < s; z++)               // цикл выборы символьной строки (указателя на нее)
		  printf("%6s", *(*(*(ptr + i) + j) + z));
	  }
	}

	for (i = 0; i < k; i++)               // цикл выбора указателя на матрицу (выбор матрицы)
	for (j = 0; j < n; j++)               // цикл выбора указателя на строку матрицы
	for (z = 0; z < s; z++)
	  free(*(*(*(ptr + i) + j) + z));     // free все указатели на символьные строки
	
	for (i = 0; i < k; i++)               // цикл выбора указателя на матрицу (выбор матрицы)
	for (j = 0; j < n; j++)               // цикл выбора указателя на строку матрицы
      free(*(*(ptr + i) + j));            // free все указатели на строки матриц
	
	for (i = 0; i < k; i++)               // цикл выбора указателя на матрицу (выбор матрицы)
      free(*(ptr + i));                   // free все указатели на матрицы
	
	free(ptr);                            // 
	printf("\n\n");
	return 0;
}